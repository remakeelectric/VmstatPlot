#!/usr/bin/python
#
# This simple tool will augment the output from vmstat with line counts from
# log files and network interface counters.
#
import argparse
import os
import signal
import subprocess
import sys
import time


def cl(li):
    """
    Count the lines added to a file object since last call.

    Originally, this method also attempted to handle log files being rotated
    behind this process, by checking file size vs current position and
    reopening the file.  However, that implementation had syntax errors so
    was clearly never _actually_ being exercised, and so therefore,
    has been excised :)
    """
    pos = li.tell()
    li.seek(pos)
    lines = len(li.readlines())
    return str(lines)


def pad(title, data=None):
    return (' %%%ds' % len(title)) % ((data is None) and title or data)


class Vmstat(object):
    def __init__(self, args):
        psr = argparse.ArgumentParser(description="vmstat, augmented")
        psr.add_argument(
            "-O", "--outfile", default=sys.stdout, dest="output",
            type=argparse.FileType("a+", 0),
            help="Output file for logging")
        psr.add_argument(
            "-I", "--interface", default=[], action="append", dest="interfaces",
            help="Interface names as found in /proc/net/dev for traffic stats")
        psr.add_argument(
            "-F", "--logfile", default=[], action="append", dest="logfiles",
            type=argparse.FileType("r"),
            help="Logfiles to count lines in")
        # TODO - add help to make sure it shows that you can add any vmstat params afterwards
        (self.options, extra_args) = psr.parse_known_args(args)
        # Compat with existing code...
        self.output = self.options.output
        self.logfiles = self.options.logfiles
        self.interfaces = self.options.interfaces

        # Get the current positions in the lines?
        for linfo in self.logfiles:
            cl(linfo)

        self.traffic = {}

        self.vmstat_cmd = ['vmstat']
        self.vmstat_cmd.extend(extra_args)

    def Traffic(self, iface):
        """
        For a given iface, "eth1" or similar, returns traffic in/out since
        last call, as a tuple (in_bytes, out_bytes)
        Returns (0,0) on first call
        """
        for line in open('/proc/net/dev', 'r'):
            if iface in line:
                data = line.split()
                rcvd, xmit = int(data[1]), int(data[9])
                if iface in self.traffic:
                    orcv, oxmt = self.traffic.get(iface, (0, 0))
                    self.traffic[iface] = (rcvd, xmit)
                    return (rcvd - orcv, xmit - oxmt)
                else:
                    self.traffic[iface] = (rcvd, xmit)
                    return (0, 0)
        return (0, 0)

    def Run(self):
        got_data = 1
        while got_data:
            line = 'first'
            got_data = 0
            self.vmstat = subprocess.Popen(
                self.vmstat_cmd, bufsize=1, stdout=subprocess.PIPE)
            while line:
                try:
                    line = self.vmstat.stdout.readline().strip()
                    if not line:
                        break

                    # Totally ignore section headers in vmstat output
                    if '----' in line:
                        continue

                    line += pad(time.asctime())
                    if 'swpd' in line:
                        # Add headers for our additions to vmstat headers
                        if self.logfiles:
                            line += ' '.join([pad(l.name) for l in self.logfiles])
                        for iface in self.interfaces:
                            line += pad('%s_i' % iface)
                            line += pad('%s_o' % iface)
                    else:
                        if self.logfiles:
                            line += ' '.join([pad(l.name, cl(l)) for l in self.logfiles])
                        for iface in self.interfaces:
                            r, w = self.Traffic(iface)
                            line += pad('%s_i' % iface, r)
                            line += pad('%s_o' % iface, w)

                    self.output.write('%s\n' % line)
                    got_data += 1
                except (OSError, IOError):
                    # Originally, this attempted to reopen the _output_ file
                    raise
                    break

            try:
                self.vmstat.kill()
            except:
                pass

            if 0 == self.vmstat.wait():
                break

if __name__ == '__main__':
    try:
        # argparse _should_ take care of this for us!
        #sys.stdout = os.fdopen(sys.stdout.fileno(), 'w', 0)
        vms = Vmstat(sys.argv[1:]).Run()
    except:
        raise
        sys.exit(1)
