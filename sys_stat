#!/usr/bin/python
#
# This simple tool will augment the output from vmstat with line counts from
# log files and network interface counters.
#
import os
import signal
import subprocess
import sys
import time


def cl(li):
  pos = li[0].tell()
  li[0].seek(pos)
  lines = len(li[0].readlines())
  if os.stat(li[2]).st_size < pos:
    fd[0] = open(li[2], 'r')
    lines += len(li[0].readlines())
  return str(lines)

def pad(title, data=None):
  return (' %%%ds' % len(title)) % ((data is None) and title or data)

def yank_arg(name, args):
  idx = args.index(name)
  arg = args[idx+1]
  args[idx:idx+2] = []
  return arg

class Vmstat(object):
  def __init__(self, args):

    self.output = None
    self.outfile = None
    if '-O' in args:
      self.outfile = yank_arg('-O', args)
      self.Reopen()
      signal.signal(signal.SIGHUP, self.Interrupt)
    else:
      self.output = sys.stdout

    self.logfiles = []
    while '-F' in args:
      lid, lname = yank_arg('-F', args).split(':')
      linfo = [open(lname, 'r'), lid, lname]
      self.logfiles.append(linfo)
      cl(linfo)

    self.interfaces = []
    self.traffic = {}
    while '-I' in args:
      iface = yank_arg('-I', args)
      self.interfaces.append(iface)

    self.vmstat_cmd = ['vmstat']
    self.vmstat_cmd.extend(args)

  def Interrupt(self, a=None, b=None):
    raise IOError('Interrupted')

  def Reopen(self):
    if self.outfile:
      self.output = open(self.outfile, 'a', buffering=0)

  def Traffic(self, iface):
    """
    For a given iface, "eth1" or similar, returns traffic in/out since
    last call, as a tuple (in_bytes, out_bytes)
    Returns (0,0) on first call
    """
    for line in open('/proc/net/dev', 'r'):
      if iface in line:
        data = line.split()
        rcvd, xmit = int(data[1]), int(data[9])
        if iface in self.traffic:
          orcv, oxmt = self.traffic.get(iface, (0, 0))
          self.traffic[iface] = (rcvd, xmit)
          return (rcvd-orcv, xmit-oxmt)
        else:
          self.traffic[iface] = (rcvd, xmit)
          return (0, 0)
    return (0, 0)

  def Run(self):
    got_data = 1
    while got_data:
      line = 'first'
      got_data = 0
      self.vmstat = subprocess.Popen(self.vmstat_cmd, bufsize=1,
                                     stdout=subprocess.PIPE)
      while line:
        try:
          line = self.vmstat.stdout.readline().strip()
          if not line:
            break

          # Totally ignore section headers in vmstat output
          if '----' in line:
            continue

          line += pad(time.asctime())
          if 'swpd' in line:
            # Add headers for our additions to vmstat headers
            if self.logfiles:
              line += ' '.join([pad(l[1]) for l in self.logfiles])
            for iface in self.interfaces:
              line += pad('%s_i' % iface)
              line += pad('%s_o' % iface)
          else:
            if self.logfiles:
              line += ' '.join([pad(l[1], cl(l)) for l in self.logfiles])
            for iface in self.interfaces:
              r, w = self.Traffic(iface)
              line += pad('%s_i' % iface, r)
              line += pad('%s_o' % iface, w)

          self.output.write('%s\n' % line)
          got_data += 1
        except (OSError, IOError):
          self.Reopen()
          break

      try:
        self.vmstat.kill()
      except:
        pass

      if 0 == self.vmstat.wait():
        break

if __name__ == '__main__':
  try:
    sys.stdout = os.fdopen(sys.stdout.fileno(), 'w', 0)
    vms = Vmstat(sys.argv[1:]).Run()
  except:
    sys.exit(1)
